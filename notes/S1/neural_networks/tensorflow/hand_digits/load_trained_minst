import tensorflow as tf


import tensorflow as tf
import numpy as np
import math
from tensorflow.examples.tutorials.mnist import input_data

save_file="./mnist_model.ckpt"

#parameters
learning_rate = 0.01
n_input = 784 #38*38 images for mnist data
n_class = 10

batch_size = 128
n_epoch = 100


mnist = input_data.read_data_sets('.',one_hot=True)


features = tf.placeholder(tf.float32,[None,n_input])
labels = tf.placeholder(tf.float32,[None,n_class])

weights = tf.Variable(tf.random_normal([n_input,n_class]))
bias = tf.Variable(tf.random_normal([n_class]))



logits = tf.add(tf.matmul(features,weights),bias)

cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits,labels))
optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(cost)

correct_prediction = tf.equal(tf.argmax(logits,1),tf.argmax(labels,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))


saver = tf.train.Saver()

with tf.Session() as sess:
    saver.restore(sess, save_file)

    test_accuracy = sess.run(
        accuracy,
        feed_dict={features: mnist.test.images,labels: mnist.test.labels}
    )



print('Test Accuracy: {}'.format(test_accuracy))
